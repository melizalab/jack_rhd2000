

* install notes

Linux and OS X don't need any additional USB drivers, although Linux needs a
rules file.

to compile the interface program from Intan, first run qmake, then make.

* rhythm api notes

consists of several classes. we're stuck with c++, though most of the
Intan-written classes are simple enough that the functionality could be lifted
into a pure C interface.

** okCFrontPanel

opal kelly interface. This library comes from Opal Kelly. Used to upload the
fpga bitfile. has some low-level memb functions for sending and receiving data.

The version I compiled doesn't seem to work, so I'll need to use the precompiled
versions shipped by Intan.

The linking is windows style, which means we statically link to some functions
in libokfrontpanel, but then call a method to load the dynamic library. This
means the sofile has to be in a known location.

** Rhd2000EvalBoard

this is the main high-level interface. configures the device, retrieves data.
owns the pointer to the okCFrontPanel object. essentially wraps common
communication tasks with the OK.

clarifications from the documentation follow:

there are 8 MISO input streams from RHD2000 chips, two per SPI cable. There are
8 available USB data streams.  Not all need to be enabled, which can reduce the
size of the USB packets and thus the latency.

there are 4 MOSI outputs to the RHD2000 chips. multiple chips can share the same
SPI bus but will receive the same commands.  Every sampling period, the FPGA
sends a series of commands through the MOSI bus.  The main command instructs the
chips to return ADC results from the three channels, and there can be up to
three additional commands.  Each auxiliary command produces an additional MISO
result, which due to some pipeline delays are the first three results in the
data frame.  The data streams are interleaved.

Each data frame has three aux commands, but we can upload sequences of commands
to be played in successive frames.  These sequences can repeat indefinitely in
their entirety or in part (or not at all).

Command sequences can be up to 1024 frames long, and there are RAM banks that
can hold up to 16 command sequences.  Different command sequences can be
assigned from these RAM banks to different ports.

The data frames also contain results from the ADCs on the eval board (up to 8
channels) and the TTL values.

No obvious way to stream data to the DACs, though one can redirect a channel
from an input data stream to the DAC for realtime monitoring. DAC values can be
set manually but maximal output rate is ~1 kHz. This means stimulus presentation
is going to require a sound card (or else some serious verilog reprogramming)

* jack considerations

the jack module will be pulling data off the opal kelly fifo.  to keep latency
low this fifo should be kept as empty as possible. we can report latency to the
jack system with jack_port_set_latency_range. latency estimates will also
include any transmission delays, etc.  we may need to update from time to time
based on the fill state of the fifo.

one potential major problem is that the rhd200EvalBoard class allocates memory
for incoming samples rather than putting them into a ringbuffer, so it's not
usable for realtime acquisition. It looks like I could potentially preallocate
the memory.

question of whether to implement as a plugin or a backend driver. Advantage of a
plugin is that it would work with both jack 1 and jack 2 without any
translation.  The driver may have more privileges (like being able to set the
sampling rate of the jack engine)

The intan can't be used for stimulus presentation, so in acute experiments we'll
also need a sound card. Jack2 appears to suport slaving multiple drivers, but
there's little documentation on this.  I think the alsa_out plugin is the way to
go.

http://www.trac.jackaudio.org/wiki/A_guide_to_the_Jack1_source_code
http://www.trac.jackaudio.org/wiki/A_guide_to_the_Jack2_source_code

Another consideration is how to support interactions with the eval board in
parallel to the jack acquisition. For example, setting amplifier bandwidths.
Some operations, like impedance testing, probably need to be executed outside of
JACK by separate programs. If multiple processes can communicate with the board,
then I could probably upload new commands while jack is running. Otherwise the
setup either needs to happen when starting the JACK driver, or beforehand.
Should probably see how intan's software handles this use case. Could just swipe
the impedance measurement and bandwidth code and implement as a separate
program.

Okay, looks like only one program can access the device at once.

* DONE write test connection program (test_driver)

connect to the opal kelly, upload the Rhythm bitfile, and flip some LEDs. I'm
using only the opal kelly class for this, to get a sense of how complex it is to
manipulate things directly

* DONE write test data collection program (test_stream)

This test program uses the Intan classes to connect to the device, scan for
amplifiers, and collect a bit of data.

The headstage-scanning code is fairly complex - it's lifted from mainwindow.cpp.
I'm leaving out the delay inference for now.

reading data a block at a time is way too slow.  probably need to pull more data
off the usb bus at a time to be efficient. Blocks are 60 frames.  Probably some
of this inefficiency is due to how data blocks are filled from the usb buffer.

* DONE design interface

The things we need to do with the eval board are:

1. get number of connected headstages
2. enable and disable spi ports
3. set sample rate
4. set headstage filtering parameters
5. impedance testing
6. stream data

The interface for the jack driver should be relatively simple - specify how many
ports to monitor and the sampling rate, at a minimum. Setting bandwidths could
be done at startup. Z testing should probably have its own application.  Indeed,
one could use the intan GUI to do this.

Q: should I use the intan c++ interface or just lift the commands from the
source? the interface is not very good, and doesn't actually provide much
abstraction. But the real reason to reimplement is to replace the datablock
class so we can stream the data more efficiently. The main culprits are
inefficient casting (convert char * array into ints manually) and some extra
copy operations.  Some copying is going to be necessary because of how the
channels are interleaved.  Another consequence is that if the FPGA software
changes, I'll have to update the implementation.  OTOH, if we want to hack that
code we'll have to maintain our own impl.

Some further testing reveals that pulling data off the usb bus one 60-frame
block at a time is much too slow.  This is a latency of 2 ms at 30 kHz.  The intan gui
is able to keep the fifo empty most of the time at 20 kHz, reading 12 blocks at
a time, so that means the latency is ~36 ms (or 720 frames).

I think I'm going to have to reimplement. Q: write a separate, testable
interface to the eval board, or just write a jack driver?  If a jack driver,
jack1 or jack2?


* base interface

base interfaces should encapsulate a lot, in my opinion, so they can be general.
a general daq interface should support starting and stopping, methods to query
the availability of data, and methods to query the capabilities of the device.
I'm not sure about whether a read() fxn is useful, because the format of the
data in memory will depend so much on the implementation.  read() could return a
void *, of course, though that's almost like not specifying an interface.

support changes to sampling rate? in principle this is okay, though it requires
colleciton to be stopped and the fifo to be flushed.  in practice there are some
complication related to regeneration of command sequences (see below)

a more general question is whether we should support dynamic reconfiguration of
the object.  If the interface is intended only for JACK drivers, the
configuration will always only happen once.

* rhd2000 eval implementation

a few tricky bits related to the aux command sequences.  setting the sampling
rate requires regeneration of the command sequences, both for the impedance
checking DAC and some registers on the amplifier.

I implemented this by setting sampling rate in the constructor for the eval
board and the amps - no need to support changes to it in a jack-based system.

* DONE data memory storage

data are copied out of the eval board's fifo in a fairly complex structure whose
sizes depend on the number of enabled data streams

: uint64_t header
: uint32_t frame
: short aux_data[3][nstreams]
: short amp_data[32][nstreams]
: short filler[nstreams]  (always zeros)
: short adc_data[8]
: short ttl_in
: short ttl_out

The logic for dealing with this data include:

1) allocating a frame buffer of the appropriate size
2) traversing an array of frames
3) reading out elements across frames

Essentially what we need to know is the size of a frame, which gives the stride
for reading data across frames, and the offset from the start of the frame to a
given channel

There's a discrepancy between my interpretation of the spec and the code in
rhd2000datablock.cpp: specificially, the auxiliary data comes first in the MISO
results.

another bit of weirdness - the aux data is shifted by a frame. is the first
frame corrupted?

p 9 in the manual states that "every MISO result received through the Rhythm
FPGA corresponds to the MOSI command sent three steps earlier" - so this
explains why the auxiliary data comes first, and also why the aux data is
delayed by a frame.

JACK will need the data as floating points, and the data will have to be read
out using strides. for the headstage data:

out[chan][t] : (buffer + 16 + (chan+3) * nstreams + stream + t * frame_size)

then for the eval board's adcs:

out[chan][t] = (buffer + 16 + 36 * nstreams + chan + t * frame_size)

there may be an especially efficient way to do the strides, though the
conversion to floating point prevents any kind of memcpy.

an additional complication is that we don't want to copy out data from amps that
are disabled.  one option would be to generate a lookup table that maps channels
to offset, which would be pretty fast to iterate through, and could be
regenerated whenever the user changes stream or amplifier activation state.

* TODO fix little-endian assumptions

The returned data is little-endian, which works fine reading things directly
into variables, but there should be some preprocessor macros for when the arch
is big-endian.

* DONE test different sampling rates

* DONE infer cable length

user can still set cable length manually

* DONE allow user to disable streams with active amps

* DONE allow user to set per-amplifier filter and amp power values

* DONE JACK driver parameters

user needs to set

1. sampling rate
2. period size
3. device serial (optional)
4. port configuration (A-D)
   1. enabled
   2. channels to use
   3. filter bandwidth
   4. dsp cutoff
   5. cable length
5. aux adc configuration
   1. channels to use

unfortunately JACK is fairly restrictive in how parameters are parsed; each
parameter has to be assigned a character, so I can't do a complex setup like
-A,c 0xffff to set the channel mask for port A.  Probably the best option is to
require a complete specification that's parsed, like -A 0 to disable, -A
0xffff,100,3000,1,3.0 to enable the first sixteen channels, set the bandwidth to
100-3000, dsp cutoff to 1, and cable length to 3.0.  It's a bit hacky but I
don't see any other options at the moment.

add to docs how to list usb devices

os x : system_profiler SPUSBDataType
linux: lsusb

* DONE JACK driver skeleton

writing this jack driver is a bit of a pain. The server code is exported as a shared
library, but the headers are not, so one either has to link into the jack
source or else build the driver in the jack source tree.

I'd sort of prefer to write the driver for jack 2, because the rhd code is in
C++, and the jack server headers have c++ syntax errors.  However, I can't get
jack 2 to compile for OS X, either with waf or with xcode.

we're unlikely to be using the software on macs, but maximum portability is good.

* DONE optimize xrun detection and handling

it's a little confusing how run_cycle is supposed to work. It clearly needs to
wait until there's enough data in the fifo to fill the port buffers. In my first
attempt, I just estimate the amount of time needed for sleep, then call read().
It takes about 3.8 ms to pull 1024 frames of data (106496 bytes) off the usb
bus. Scales with period size, but not linearly. At the USB 2.0 max rate of 39
MB/s, this much data should take 2.7 ms, so we're doing pretty well. The main
problem with doing it this way is that we use up precious RT thread time waiting
for the data to come over the bus. If this is a problem, switch to a threaded
model.

Two types of xruns can occur.  If the process cycle doesn't get back to
run_cycle in time, the fifo will start to accumulate frames (i.e. overrun). In
principle, JACK should detect when this is occurring by the fact that the time
between calls to run_cycle() are longer than a period.  The FIFO will start to
accumulate frames, but these will be consumed in subsequent cycle(s).

Underruns occur if the fifo fails to fill in time for the next process cycle.
This is calculated by comparing the time when the fifo is full with the time
that the cycle is supposed to start (period_usec plus the last cycle start).
This value is all over the place.  Possibly due to variability in response to
wire out queries.

Quick test indicates that polling the fifo takes 1.2 ms on average, which is
consistent with the range of underrun delays I'm seeing.  This is also
consistent with the published rate of 800 UpdateWireOut operations per second.

One idea would be to let the fifo run with a few frames (1.2 ms ~ 37 frames) as
a buffer. Of course that adds latency, and it only really helps if I use that
buffering to pre-emptively start transfer operations (i.e. add in the estimated
delay from the poll operation in the wait function).  This is probably only an
average case solution because the wireout operation is nondeterministic.

Further testing on polling and reading indicates that the worst-case scenarios
are pretty bad.  After reading 20,000 periods, I had max poll times of 21 ms and
max read times of 52 ms.

Threading the driver may help with reads, but not as much with polls.

** CANCELED add extra latency option

user specifies extra latency on the command line. After starting acquisition,
wait enough time for the fifo to fill that much. How to maintain that padding?

Option 1. Wait until fifo > period_size. In this case I have to wait one period
plus the padding before polling.  Quick test - fifo quickly empties, because the
next cycle is initiated immediately after sufficient samples are acquired.
The engine doesn't wait before initiating the next cycle.

** DONE check timestamp of returned data

this option takes advantage of the fact that the FPGA should behave
deterministically, so if we simply wait the appropriate amount of time on the
host there should be sufficient data in the FIFO. This can be checked by
verifying that the last frame's header is as expected (magic number, timestamp
corresponding to the number of frames). If it's not, there's been an underrun -
but that shouldn't happen anyway. This may hinge on usleep being sufficiently
precise.

this appears to work really well! should probably monitor the FIFO every so
often to update latency

* DONE handle opal kelly errors?

many of the okFrontPanel functions return error codes, which are not currently
handled.  Likewise, the driver functions probably need to have try/catch blocks
for calls into the rhd2000 interface.

okay - the only public methods that throw errors in evalboard are the
constructor, scan_ports(), set_sampling_rate(), and configure_port().  The latter two only
throw errors if they're called when the interface is running, so these are
really logic errors.  anyway, all these are called in a try block in the driver
initialization function, so there shouldn't be any uncaught exceptions.

most of the other okFrontPanel calls don't return useful error codes, so they
can be ignored

* DEFERRED do impedance testing?
  - State "DEFERRED"   from "TODO"       [2013-05-02 Thu 16:46] \\
    for now, use intan's interface

* DONE add latency callback

* TODO [#C] maybe poll fifo to estimate upper end of latency

this is a bit tricky because we don't want to introduce an xrun by testing
latency! And there will be some uncertainty about the returned value, because of
the delay involved in the roundtrip wireout query.

* DONE add hardware monitoring

this is implemented a little hackily. basically we label the ports that support
hardware monitoring with a port flag, and then do something in the
driver->write() function to get the hardware to monitor the port. for the eval
board this is somewhat complicated by the fact that there's only 8 available
monitor ports, and each port can only monitor one channel. one option is simply
to iterate through the ports and assign each one that's requested monitoring to
the next available dac.

ultimately the best option is probably to do the monitoring in software.

* TODO use aux ADCs on RHD2000 more intelligently

right now I'm not really using one of the aux command slots, and the second
command slot is splitting its time between the ADCs and the temperature and
supply voltage readings, so the effective sampling rate on these inputs is not
the same as the amplifier. It might be nice to dedicate one of the aux command
slots to sampling one of the ADCs at full sampling rate.

* TODO document evalboard class
* DONE better error messages for bad filtering values

relevant functions now throw errors

* DONE fix buffer size callback

didn't need to start and stop acquisition
* DONE load bitfile from jack directory

could set a compile time variable, but I'm just going to force the user to set JACK_DRIVER_DIR

* DONE installation instructions for debian

Need 7.0+ (wheezy)

** DONE realtime kernel?

: wget -O /etc/apt/sources.list.d/pengutronix.list http://debian.pengutronix.de/debian/pengutronix.list
: apt-get -q update
: apt-get -q --allow-unauthenticated install pengutronix-archive-keyring
: apt-get -q update

** DONE install jackd

: apt-get install jackd1 libjack-dev
: apt-get source jackd1
* DONE test realtime patch on modeln
* TODO test alsa_out with intan driver

generates a fair number of xruns - 284 over about 12 hours.  There's also quite
a bit of drift as the resampler adjusts itself.

There's some oddness about the sample rate - the driver refuses to go to 30 kHz
or any value other than 44.1 kHz, so the resampler is bound to be operating in
overtime.

* DONE compare output to intan's program

** DONE fix scaling of samples from RHD2000

these are sent as unsigned shorts, so the midpoint has to be subtracted off.
there's an option to send data as twos complement, but this seems simple enough.

** DONE verify that noisy channels are noisy in jack

currently channel 16 is attached to a long wire and picks up a nice 60 Hz
signal, so can verify that mapping/scaling is correct by looking for this in the
jack signal.  although this is clearly noisier than other channels, it's not as
noisy as I'd expect.  One problem is that yass isn't really set up for this kind
of visualization

double-checked that registers are being set correctly.  the printed values for
resistors in their small test program are different from the ones that are
actually used to set the cutoffs (and also somewhat different from what's in the
published table)

still some big differences with intan data. Theirs has a fairly dramatic settle
within the first 1000 samples or so, and there's a strong 60 Hz signal on
channel 17.  Mine has a very sharp settle and the noise is overall much less.

the registers are identical during their config and mine, with the exception of
zcheck dac power.  try turning that on

some other discrepances - temp sensor 2 was disabled instead of 1.

still the same. it's starting to look like a problem in the conversion
code...nope, the values are being read out of the buffer correctly. wft! any
other differences?

1. not putting a waveform into the DAC register
2. dsp settle in fpga is true! this might be it

yes. one bit off. geez.
